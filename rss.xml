<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Ben O'Neill's Blog</title>
<description>Mostly tech-related updates and articles by Ben O'Neill.</description>
<language>en-us</language>
<link>http://oneill.sh/rss.xml</link>
<atom:link href="http://oneill.sh/rss.xml" rel="self" type="application/rss+xml" />
<!-- list -->
<item>		<title>How To Create a Remote SSH Gateway to a Local OpenBSD Server</title><guid>https://oneill.sh/rss.xml/sshgateway-openbsd.html</guid><pubDate>Thu, 10 Nov 2022 18:11:54 -0500</pubDate><description><![CDATA[<h1>How To Create a Remote SSH Gateway to a Local OpenBSD Server</h1>

<p>Hosting a server on your local network can provide many advantages, such as
access to the physical hardware and easy interaction with other devices on the
network. However, by default you will not be able to access it from outside that
network.</p>

<p>I recently set up a OpenBSD server on a Thinkpad T60, and I have multiple users
connecting to it for development as well as recreational use (I have installed
a few CLI games for fun). It is hosted on my university&rsquo;s network, so users can
connect to it locally from anywhere on campus. I also wanted to be able to
access it remotely as well through the internet. To achieve this, I set up a
reverse SSH tunnel on the Thinkpad using <code>autossh</code>, and I have it running as a
daemon now.</p>

<p>In order to do this, first you must first have a server connected to the
internet (I am using a Vultr VPS instance running Debian 11). It is fairly
straightforward from there.</p>

<h2>Step 1: Modify the remote server&rsquo;s sshd configuration</h2>

<p>Add the following lines to your sshd config (on my machine it is in
<code>/etc/ssh/sshd_config</code>:
<code>
AllowTcpForwarding yes
GatewayPorts yes
</code></p>

<h2>Step 2: Add a user on the remote server for tunnelling</h2>

<p>Now, it is necessary to add a user on the remote server for the local one to
connect to, and generate a SSH key for the new user.</p>

<p>```</p>

<h1>add the user</h1>

<p>useradd -m sshfwd</p>

<h1>generate a ssh key for the user</h1>

<p>su sshfwd
ssh-keygen
```</p>

<p>Afterwards, copy the public key in your local machine (it should be in <code>~/.ssh/id_rsa.pub</code>)
to your remote server and add it to <code>/home/sshfwd/.ssh/authorized_keys</code> (you can just copy
it to that file since it will not even exist for a new user).</p>

<h2>Step 3: Open a port for the tunnel</h2>

<p>I am using <code>ufw</code> as a firewall on my remote server, and I highly recommend it.
On Debian using <code>ufw</code>, the following should open a port for your ssh tunnel. You
can pick any unused port.</p>

<p><code>
ufw allow PORT
service ufw restart
</code></p>

<h2>Step 4: Create autossh tunnel daemon on the local server</h2>

<p>This is probably the most involved part. I wrote a one line script called
<code>sshtund</code>, and put it in <code>/usr/local/bin</code>. <code>autossh</code> is not installed on OpenBSD
7.2 by default, so it is necessary to install it by running <code>pkg_add autossh</code>.</p>

<p>Here is the autossh command:
```</p>

<h1>!/bin/sh</h1>

<p>autossh -M 0 -o &ldquo;ExitOnForwardFailure yes&rdquo; -o &ldquo;ServerAliveInterval 30&rdquo; -o &ldquo;ServerAliveCountMax 3&rdquo; -o &ldquo;TCPKeepAlive yes&rdquo; -N -v -R PORT:localhost:22 sshfwd@REMOTE_IP &amp;
```</p>

<p><code>autossh</code> ensures that the tunnel doesn&rsquo;t go down, as it will attempt to
reconnect if the connection is lost.</p>

<h2>Step 5: Create and start the daemon</h2>

<p>Create a rc file for the tunnel on the local machine at <code>/etc/rc.d/sshtund</code>:</p>

<p>```</p>

<h1>!/bin/ksh</h1>

<p>daemon=&ldquo;/usr/local/bin/sshtund&rdquo;</p>

<p>. /etc/rc.d/rc.subr</p>

<p>pexp=&ldquo;sshtund: ${daemon}${daemon_flags:+ ${daemon_flags}} [listener].*&rdquo;</p>

<p>rc_configtest() {
        ${daemon} ${daemon_flags} -t
}</p>

<p>rc_cmd $1
```</p>

<p>Then run <code>rcctl start sshtund</code> to start the tunnel. You should now be able to
connect to your local server anywhere via <code>ssh -p PORT user@REMOTE_IP</code>, using
the username on your local server.</p>
]]></description></item>
<item>		<title>Zandra Development Continues</title><guid>https://oneill.sh/articles/zandra-update.html</guid><pubDate>Tue, 08 Nov 2022 13:11:22 -0500</pubDate><description><![CDATA[<h1>Zandra Development Continues</h1>

<p>I have recently returned to developing the Zandra Linux distribution, and added
some new packages. I have also been brainstorming possible design changes for
the future. I posted a development log a couple weeks ago
<a href="https://zandra.org/log/log-10-26.html">here</a>. I am open to feedback and
contributions to the project.</p>
]]></description></item>
<item>
<title>How To Filter Emails Into Mailboxes Using Notmuch and Neomutt</title>
<guid>https://oneill.sh/articles/notmuch-neomutt</guid>
<pubDate>Thu, 05 Mar 2020 21:31:11 -0400</pubDate>
<description><![CDATA[
<p>Notmuch is a very powerful tool for managing email, and I had an issue
I have been dealing with for a little while now that I realized I
could use Notmuch for, so I will go through the process I took to
solve it in this article. I get loads of emails from colleges, and I
wanted to separate those emails from everything else. Now, I&rsquo;ve heard
Gmail has this feature, but since I don&rsquo;t use Gmail on my primary
email address (unfortunately I have a Gmail account for school), I
decided to figure out how to separate emails from colleges into their
own mailbox in my mail client, Neomutt.</p>

<p>First off, when syncing mail, it should automatically tag new mail
if it matches given queries, like in my case the words &ldquo;college&rdquo; and
&ldquo;university&rdquo;. I have a script that downloads new mail every five
minutes in a cronjob, so I added this:</p>

<pre><code># ~/.local/bin/mailsync
...
notmuch new # update notmuch db
notmuch tag +college "university" and in folder:xyz/INBOX
notmuch tag +college "college" and in folder:xyz/INBOX
</code></pre>

<p>Now every time mail is synced, it will be tagged appropriately. If you
wanted to perform a Notmuch query for all mail that does not contain
those phrases, you could type the following:</p>

<pre><code>$ notmuch search not tag:college
</code></pre>

<p>This query can also be used in Neomutt by using virtual mailboxes like
so:</p>

<pre><code># ~/.config/mutt/muttrc
...
set nm_default_uri="notmuch:///home/ben/.local/share/mail" # replace with your mail dir
set virtual_spoolfile=yes
virtual-mailboxes \
    "Inbox" "notmuch://?query=folder:xyz/INBOX and not tag:college and not tag:spam"\
    "College" "notmuch://?query=folder:xyz/INBOX and tag:college"\
    "Sent" "notmuch://?query=folder:xyz/Sent"\
    ...
</code></pre>

<p>This is a super helpful thing for me and it was an interesting
learning experience setting this up. I hope this can be helpful to
somebody. Thanks for reading!</p>
]]></description>
</item>
<item>
<title>Why RSS Is So Important Today</title>
<guid>https://oneill.sh/articles/why-rss-is-so-important-today</guid>
<pubDate>Wed, 26 Feb 2020 21:31:07 -0400</pubDate>
<description><![CDATA[
<p>RSS is an amazing format for listing news articles, blog posts,
podcasts, and pretty much anything else. But with Google News,
Snapchat&rsquo;s news platform, and other news &ldquo;hubs&rdquo;, RSS has become more
important than ever for preventing the spread of misinformation,
discrimination based on opinions, and overreliance on corporate
services.</p>

<p>RSS readers provide the basis for decentralization of information
received on the internet. If you use an RSS reader, chances are you
have multiple feeds from different sites on it. This means that you
are not relying on the same service for all your news. The RSS
reader you use is hopefully free software; in that case you don&rsquo;t have
to worry about it disrespecting your freedom, so think of it like a
mailbox. It takes all the mail you get from these different places and
puts it in one place. A mailbox doesn&rsquo;t say &ldquo;no&rdquo; to people with
certain opinions. It can&rsquo;t discriminate, and neither should your news
outlet.</p>

<p>RSS readers also happen to be very convenient. Once you copy your
favorite feeds' URLs into it, it will list the content of all of them
in a hopefully clean and simple way (I know Newsboat for GNU/Linux and
spaRSS for Android do). This reason alone is not good enough of
course, as the aforementioned points are much more important, but it
does help greatly.</p>

<p>RSS is a great platform for many reasons, so if you&rsquo;re not using it
yet, a great place to start would be downloading a free app like
spaRSS or Feeder for Android (in F-Droid for Replicant) or Liferea
for GNU/Linux. My blog is available on RSS as well under
<a href="https://benoneill.xyz/posts/index.xml">this URL</a>. Happy hacking!</p>
]]></description>
</item>
<item>
<title>Review of a Lenovo Thinkpad X200 With Libreboot</title>
<guid>https://oneill.sh/articles/x200-review</guid>
<pubDate>Tue, 18 Feb 2020 21:28:48 -0400</pubDate>
<description><![CDATA[
<p><a href="https://libreboot.org">Libreboot</a> allows one to free his/her computer
from the shackles of proprietary boot firmware, which can restrict the
operating systems that can be booted or the hardware peripherals that
can be used with the computer. However, Libreboot is only available on
older machines. <a href="https://puri.sm">Purism</a>&rsquo;s Librem 5 smartphone and
<a href="https://www.raptorcs.com/">Raptor Computing Systems</a>&lsquo; Talos II
desktop are the only machines I know of that have a completely free
boot firmware from the factory. The Thinkpad X200 sells for way
cheaper than both of those, and is also a very portable, lightweight
laptop.</p>

<h2>My Specs</h2>

<p>I currently have an Intel Core 2 Duo P8400, a 480GB SSD, and 4GB of
DDR3 RAM installed in this machine, although it can hold up to 8GB
DDR3 RAM. I also have a 2TB SSHD in the ultrabase dock&rsquo;s disc drive
bay. The machine runs fast enough for what I do. It doesn&rsquo;t compile
code as fast as I wish it could, but that is a sacrifice I must make
for my freedom.</p>

<p>I also have a 9-cell battery in the machine, which holds charge for
about 5-6 hours. I can change out the battery if it runs out, as well,
which is very useful. I have two spare batteries: one 6-cell and one
more 9-cell. Finally, I have a wireless card installed that can be
used with drivers on the linux-libre kernel, as well as an ExpressCard
3x USB 3.0 port card.</p>

<h2>The Ultrabase</h2>

<p>The ultrabase is very useful. I have it plugged in to my external
monitor, mouse, keyboard, so when I get home I can plug it in and
use it as a desktop in a few seconds. It is also plugged into a power
source, and like I said before, there is a 2TB SSHD in the disc drive
bay.</p>

<h2>Should You Buy It?</h2>

<p>Yes. It is not very expensive, and it is very modular. You can
replace or upgrade parts as needed, and it can run a fully free
operating system and Libreboot supports it. It is one of the few
ethical technology items you can purchase. If you find one in decent
condition for a good price (they range from around $50-250), I&rsquo;d
recommend buying it.</p>
]]></description>
</item>
<item>
<title>The Unbeatable Effectiveness of Sed and Grep</title>
<guid>https://oneill.sh/articles/sed-grep</guid>
<pubDate>Tue, 18 Feb 2020 21:31:09 -0400</pubDate>
<description><![CDATA[
<p>Using the shell effectively in a Unix-like environment must show a
certain flow, which is comparable to poetry. According to former AT&amp;T
Bell Labs employee Brian Kernighan in his book &ldquo;Unix: A History and a
Memoir&rdquo;, many of the hackers who developed and utilized Research Unix
at Bell Labs in the early days were extremely fond of literature. Of
course, the arts and sciences are typically viewed as polar opposites,
but it is no where more prevalent than in computing that those who
create must learn from the work of the past, and must adapt that past
work to fit their present task. This is key because at the time,
people were in the early stages (not that the world is anywhere close
to finished today) of finding out how to effectively develop software,
and how to use computers to help with everyday tasks and to solve
problems that would be much more difficult to solve had computers not
existed.</p>

<p>With these ideas in mind, it is important to think about the idea that
is engrained in the minds of programmers since that era; an idea that
has stuck with programmers, even if they fail to live up to it: the
Unix philosophy of &ldquo;do one thing, and do it well&rdquo;. Grep and Sed,
incredibly simple yet incredibly useful in an immense, seemingly
infinite range of scenarios, are prime justifications for the Unix
philosophy that have stood the test of time.</p>

<p>Variants of many Unix programs are still in wide use today, but why do
we still use Grep and Sed so often if there are so many programs out
there that we don&rsquo;t use anymore that can do so much more? It&rsquo;s a
testament to the rock solid stability and the ability to put trust in
a program that you know will do what you ask it to do promptly and
with minimal effort. That is one reason. Another is the universal
nature of these programs. Only when these are combined together, a
program will continue to be useful for many years.</p>

<p>Grep is admittedly much simpler than Sed, and in fact, the basic
functionality of Grep is easily replicable in Sed. However, Grep,
which is named after the Ed command <code>g/re/p</code> (which does exactly
what Grep does as well), is only Grep. It doesn&rsquo;t try to do anything
else but read a file and print the lines that match the given pattern
to standard output. Sed, which stands for &ldquo;Stream EDitor&rdquo;, is the same
way. All it does is edit the inputted stream of text. That&rsquo;s all it is
meant to do, and that is all it will do.</p>

<p>These useful programs can be applied in many different scripts as well
as be used in interactive shells due to their simple nature. It is
easy to find a case where you may want to &ldquo;grep&rdquo; a certain piece of
text from a source file (maybe to find a function definition or to
check if a header file is included). You could also want to print all
the lines of a file until a certain pattern is found, which can be
easily accomplished with <code>sed /re/q</code>. Learning Sed and Grep is a
very common and beneficial investment for command line users and
hackers in general. It really is no wonder they survived this long.</p>
]]></description>
</item>
</channel>
</rss>
